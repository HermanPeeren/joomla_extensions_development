<?xml version="1.0" encoding="UTF-8"?>
<book version="5.1" xmlns="http://docbook.org/ns/docbook"
      xmlns:xlink="http://www.w3.org/1999/xlink"
      xmlns:xila="http://www.w3.org/2001/XInclude/local-attributes"
      xmlns:xi="http://www.w3.org/2001/XInclude"
      xmlns:trans="http://docbook.org/ns/transclusion"
      xmlns:svg="http://www.w3.org/2000/svg"
      xmlns:m="http://www.w3.org/1998/Math/MathML"
      xmlns:html="http://www.w3.org/1999/xhtml"
      xmlns:db="http://docbook.org/ns/docbook">
  <info>
    <title>Joomla Extensions Development</title>

    <author>
      <personname><firstname>Nicholas</firstname><othername>K.</othername><surname>Dionysopoulos</surname></personname>

      <affiliation>
        <orgname>Akeeba Ltd</orgname>
      </affiliation>
    </author>

    <pubdate>August 2022</pubdate>

    <copyright>
      <year>2022</year>

      <holder>Nicholas K. Dionysopoulos</holder>
    </copyright>

    <legalnotice>
      <para>Permission is granted to copy, distribute and/or modify this
      document under the terms of the GNU Free Documentation License, Version
      1.3 or any later version published by the Free Software Foundation; with
      no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts. A
      copy of the license is included in the section entitled "GNU Free
      Documentation License".</para>
    </legalnotice>
  </info>

  <chapter xml:id="intro">
    <title>Introduction</title>

    <section xml:id="intro-about">
      <title>About this book</title>

      <para>I started writing this book in August 2022 as a quick reference
      for myself and other third party developers writing Joomla 4 extensions,
      or migrating our extensions to Joomla 4's native MVC.</para>

      <para>While Joomla 4 has an amazing, rich and powerful architecture and
      API it does not have any real developer-facing documentation. The
      documentation you will find is outdated, chaotic and leaves you running
      for your life.</para>

      <para>I am making every effort to make this book approachable to all
      levels of developers, from the novice to the expert. However, to keep
      things relatively simple and because I am doing this unpaid, on my
      limited free time, I decided to take a few shortcuts here and there. I
      do not explain every concept in great detail, I try to explain it in
      practical detail. </para>

      <para>If you want to see what a real world Joomla extension looks like I
      urge you to take a look at and dissect the Joomla 4 extensions my
      company, Akeeba Ltd, has published free of charge. The simplest
      component to start with is Akeeba ContactUs. The most complete
      combination of a component, plugins and several modules we have
      published is Akeeba Ticket System — even the free of charge version uses
      most of the features I am describing in this book.</para>

      <para>Hopefully, you will find my approach pragmatic and result–driven
      instead of a dry, technical document. If you have suggestions for
      improvement or would like to sponsor this work feel free to contact me
      through the Contact Us page on <link
      xlink:href="https://www.akeeba.com">akeeba.com</link> or the Contact Me
      page on <link
      xlink:href="https://www.dionysopoulos.me">dionysopoulos.me</link>.</para>
    </section>

    <section xml:id="intro-j4-features">
      <title>New Joomla 4 features at a glance</title>

      <para>Joomla 4 is a smorgasbord of new features, improvements and much
      needed changes. Unfortunately, a year into its release you'd be hard
      pressed to find any kind of documentation of what these are and how they
      can impact your software development practices. I will try to give you
      the 30,000–feet overview of what <emphasis>I</emphasis> found to be the
      most important changes.</para>

      <para><link linkend="concepts-namespaces"><emphasis
      role="bold">Namespaces</emphasis></link>. As you may remember, ever
      since Joomla 3.3 the legacy class names (e.g. <code>JUri</code>) changed
      to a namespaced equivalent (e.g. <code>Joomla\CMS\Uri\Uri</code>). In
      Joomla 4 a lot of the legacy classes stopped working. You can find out
      these changes neatly codified along with tools to mass convert your
      extensions in my <link
      xlink:href="http://github.com/nikosdion/joomlatypehints">Joomla Type
      Hints</link> repository. In Joomla 4 the namespacing work went even
      deeper, having all classes in components, modules, plugins and templates
      also support namespaces — if you use the new, Joomla 4 API for
      developing extensions. This is a game-changer concept! Namespaced
      classes follow the <link
      xlink:href="https://www.php-fig.org/psr/psr-4/">PSR-4</link>
      specification. Joomla caches and registers the PSR-4 mappings between
      namespace prefixes and directories on your site which means that
      <emphasis>you can safely use any class of any extension anywhere without
      having to use <code>include</code> or <code>require</code> ever
      again</emphasis>. This greatly reduces the possibility for bugs and
      massively improves the performance of Joomla and its extensions.</para>

      <para><emphasis role="bold"><link
      linkend="concepts-container">Dependency Injection Container / Service
      Locator</link></emphasis>. Joomla 1.x to 3.x inclusive had this annoying
      <link xlink:href="https://en.wikipedia.org/wiki/God_object">God
      Object</link> called the Joomla Factory (<code>JFactory</code> or
      <code>\Joomla\CMS\Factory</code>). It had a very opinionated approach on
      instantiating all sorts of globally used services, from the application
      itself, to the database, to the user objects, to the mailer object. If
      you wanted to write Unit Tests for your extension — or Joomla itself —
      it was the bane of your existence. In Joomla 4 we instead have a
      Container. It is not a real <link
      xlink:href="https://en.wikipedia.org/wiki/Dependency_injection">Dependency
      Injection Container</link> as much as it is a <link
      xlink:href="https://en.wikipedia.org/wiki/Service_locator_pattern">Service
      Locator</link>, meaning that it won't magically instantiate an object
      based on the type definitions in its class' constructor but it will let
      you retrieve the services you need to inject to your objects. Each
      extension — component, module, plugin and template — gets its own
      service locator and its own extension object which uses it. This makes
      it far easier to write unit tests for your code, especially your Models
      (which is where most of your business logic, therefore your code that
      needs testing, should already be).</para>

      <para><link linkend="concepts-webassetmanager"><emphasis role="bold">Web
      Asset Manager</emphasis></link>. In the past, whenever we wanted to load
      a JavaScript or CSS file we'd have to load its dependencies and finally
      our file. For example we might want to load jQuery, then load some
      Bootstrap core JavaScript files, then our JavaScript file. Each
      extension would do that and it lead to several chicken and egg problems.
      What if file A from extension X depends on files B and C and file B from
      extension Y depends on files C and D but D must be loaded before C?
      Bummer. The Web Asset Manager codifies the dependencies in a way which
      lets Joomla resolve them. It also lets you define alternative
      dependencies,e.g. a different JavaScript file to load depending on
      whether the user's browser supports <link
      xlink:href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules">JavaScript
      modules</link> or not, and asset groups, e.g. a collection of CSS and
      JavaScript which are meant to be loaded together. This lets you split
      your CSS and JavaScript into smaller files which load in the correct
      order and improve the performance of your user's site.</para>

      <para><emphasis role="bold"><link linkend="com-j3-vs-j4-mvc">A new
      MVC</link></emphasis>. The MVC in Joomla 1.5 to 3.10 inclusive had
      changed very little. Previous attempts to modernise it failed
      ignominiously because they simultaneously failed to go far enough and
      maintain <acronym>b/c</acronym> (backwards compatibility). Joomla 4 has
      a new MVC model which is based on Dependency Injection and namespaces,
      it is more prescriptive, more flexible and more powerful than its
      predecessors. You can very easily extend a frontend model from a backend
      model instead of writing the same code twice or doing a contortionist
      act with PHP Traits. You can easily create custom HTML helpers without
      calling static functions, use categories without writing precarious
      database code, create object-oriented URL routers and much more which we
      will explore in this book.</para>

      <para><emphasis role="bold">Hide-able inline help</emphasis>. Remember
      how Joomla 3 XML Forms looked like a word vomit with all the inline help
      text (field descriptions) being always visible? This was a bad interface
      for experienced users. At the same time, Joomla 4.0 removing all inline
      help text made the interface inapproachable for newcomers and end
      clients meant to use the site. With Joomla 4.1 it is now possible to
      have hide-able inline help text in your forms and your component
      configuration. The field descriptions are hidden by default and the user
      can show them by clicking on the <guibutton>Show Inline Help</guibutton>
      button in the interface. Now your extensions' interface can be
      simultaneously approachable for both new and experienced users.</para>

      <para><emphasis role="bold">Prepared statements</emphasis>. SQL
      injection vulnerabilities have been almost <emphasis>de
      rigueur</emphasis> for any web software, Joomla extensions being no
      exception to that. Sure, Joomla does have some very nifty tools to get
      filtered input and escape it when placed inside database queries but not
      all input can be escaped sufficiently if you do not know its
      <emphasis>type</emphasis> (integer, string, array of one or the other).
      Moreover, despite best intentions, accidents can and do happen, e.g.
      forgetting to escape one piece of input you assumed it's an integer but
      it came through a path which never did check the input type nor did it
      try to typecast it to an integer! Joomla 4 introduced <link
      xlink:href="https://en.wikipedia.org/wiki/Prepared_statement">prepared
      statements</link> which make these oversights and corner cases a thing
      of the past. You tell the query builder where you expect potentially
      user-originating data in your query, which data to use in there and what
      type this data is. You are guaranteed safe execution without worrying
      about SQL injection <emphasis>unless you try really hard</emphasis> to
      NOT let Joomla use a prepared statement. On the flip side, there are a
      few types of SQL queries which cannot execute in the context of prepared
      statements and required some code contortion to execute.</para>

      <para><link linkend="com-mailtemplates"><emphasis role="bold">Mail
      templates</emphasis></link>. In the past there were two ways to handle
      email for your extension. You could send plain text only email using
      language strings OR you would have to invent your own email template
      management. The former led to ugly email messages. The latter required
      reinventing a very complex device on each and every of your components.
      If you did not have a component, tough luck. Darn! Joomla 4's mail
      templates feature allows your users to use the Joomla WYSIWYG editor to
      create rich email templates with placeholders to be replaced by data
      provided by your extension. This feature looks half-finished in Joomla 4
      as it has no obvious way to register or update email templates. Don't
      worry, though, we do have a way to work around its shortcomings,
      complete with example code.</para>

      <para><link linkend="com-scheduled-tasks"><emphasis
      role="bold">Scheduled Tasks</emphasis></link>. Many extensions need to
      periodically execute some kind of code. For example, sending email
      newsletters, updating the prices of thousands of SKUs in an online shop
      from an Excel or XML file, running backups, you name it! In the past we
      had to reinvent the wheel on each extension we built. For example, we
      created ‘special’ URLs in our components or through com_ajax to be
      accessed with wget, cURL or a service like WebCRON.org periodically; or
      we created CLI scripts to be used with CRON jobs. We almost always
      offered more than one way to do things which led to a certain degree of
      code duplication. In all cases, the user was responsible for setting up
      CRON jobs or the equivalent on a third party service for every single
      task they needed to be executed periodically. This was a tall ask!
      Joomla 4.1 and later offers a new Scheduled Tasks feature which allows
      users to select which tasks they want to be executed, when to execute
      them and even configure their execution parameters — all within the
      familiar Joomla user interface. It even lets the task scheduler to be
      executed three ways: with a command line CRON job, a URL–based CRON job
      or automatically based on visitor traffic (lazy scheduling). The end
      user has to set up just the one CRON job or, if they are using lazy
      scheduling, just flip a switch.</para>

      <para><link linkend="com-cli"><emphasis role="bold">CLI
      Application</emphasis></link>. In the past we had to create bespoke CLI
      scripts for every task each of our extensions needed to allow to be
      executed from a command line context, be it a CRON job or a manually
      executed CLI helper tool. This required creating a new application and
      contend with the two facts that a) the base class changed at least twice
      in the last ten years and b) it lacked a lot of methods several core and
      third party classes were expecting to be present. This led to a lot of
      reinventing the wheel. The Joomla CLI Application is like a built-in
      version of WordPress' WP-CLI or Drupal's Drush in that it's based on the
      Symfony Console Components and can be easily extended using plugins
      which register command classes. Used wisely, it can enhance your
      extensions and help your advanced users who can use the CLI to automate
      things around their site.</para>

      <para><link linkend="com-api"><emphasis role="bold">API
      Application</emphasis></link>. Joomla has historically been an HTML–only
      application. Yes, sure, you can have JSON, XML, Feed and Raw views but
      they feel bolted onto the HTML application; they are not a real API to
      your component. Joomla 4 introduced a brand-new application, the
      ApiApplication which lives in the <filename>api</filename> directory of
      your site. For now it's only accessible to Super Users but it provides a
      real RESTful JSON-based API to components which integrate with it.
      Integrating your component with the API application is as easy as
      creating a Web Services plugin and adding a few easy to create
      controllers and views in the API part of your component. That is to say,
      your component now has a backend, a frontend and an API side. You don't
      <emphasis>have</emphasis> to integrate with the API application but if
      you have something which could benefit from automation it is strongly
      encouraged to do so.</para>

      <para><emphasis role="bold">Dashboards</emphasis>. Between Joomla 1.0
      and 3.10 inclusive Joomla only ever offered one dashboard, the main
      Control Panel page which loaded when you logged into your site's
      backend. In Joomla 1.0 to 1.6 it was hard–coded and inflexible. I added
      the ability to use plugins to render custom action buttons in Joomla
      1.7, based on my experience with my software. Starting with Joomla 3.0
      you could now publish <emphasis>modules</emphasis> to add information
      panes to the Control Panel dashboard. If you wanted the same experience
      in your extension… tough luck. You would have to reinvent the wheel.
      Joomla 4.0 and later allow you to set up <emphasis>one or more dashboard
      pages for your own component</emphasis> which appear in the Joomla menu
      structure, under your component's menu item, and where you and your end
      users can publish any number of modules.</para>

      <para><emphasis role="bold">Layouts everywhere</emphasis>. A lot of the
      HTML generated by Joomla, even throughout version 3, was statically
      coded in the PHP files implementing the business logic, making any kind
      of customisation impossible (or, at the very least, requiring a very
      judicious application of in-memory code editing, buffer stream wrappers
      and Reflection). Let's just say that if you disagreed with how a certain
      form field or HTML helper rendered its HTML you were out of luck.
      Layouts were introduced in Joomla 3.4 and later versions did make better
      use of them in various places but you still had to contend with several
      of the same issues. Not anymore! Joomla 4 uses layouts for every kind of
      HTML output. If you want to override how some core code renders in your
      component or your template you can easily do that by overriding the
      layout. Likewise, you are encouraged to use Layouts everywhere you have
      reusable HTML output in your extensions to make it easier for end users
      to override them in their template.</para>

      <para><emphasis role="bold">Media options per component</emphasis>.
      Joomla 3.4 introduced an upload checker for all uploaded files based on
      the work I had done in Admin Tools. This was a massive leap in security
      as we codified the basic upload checks and encapsulated them in a way
      that made them run automatically whenever you were handling uploads.
      However, this was controlled by the Media component's
      (<code>com_media</code>) settings. This was great if your extension only
      ever needed static media files to be uploaded. If you wanted to allow
      your users to upload non–media files, or files otherwise not acceptable
      anywhere else <code>com_media</code> was exposed, such as ZIP, 7Z, and
      RAR files in a helpdesk component, you had to modify the Media options,
      allowing these files <emphasis>everywhere</emphasis>. The unfortunate
      solution to that was that third party component developers chose to
      <emphasis>disable</emphasis> the upload checks, undoing the security
      improvements we added in Joomla 3.4. This is no longer the case! Joomla
      4 allows each component to have its own, private copy of Media settings
      for its own uploads. Any upload being handled by your component (not
      <code>com_media</code>!) will have these private settings applied. It's
      a bit of a chore BUT it lets you provide a much safer option for
      uploading files through your extension.</para>

      <para>There are many more improvements which I will not cover in this
      book. If you found out something cool and you'd like me to write a
      section for it, please do let me know. I can't promise it will
      definitely make it into the book but I will at least promise to give it
      a good thought and most likely a good try.</para>
    </section>
  </chapter>

  <chapter xml:id="concepts">
    <title>Basic concepts</title>

    <para>As mentioned in the <link linkend="intro-j4-features">previous
    chapter</link>, Joomla 4 introduced a lot of new features. Some of these
    features introduce new fundamental concepts or refine existing ones.
    Before delving deeper into Joomla extension development let's take a look
    at these basic concepts to make sure we are all on the same page.</para>

    <section xml:id="concepts-namespaces">
      <title>Namespaces</title>

      <para>The single most defining change in Joomla 4 is that Joomla
      embraces <link
      xlink:href="https://www.php.net/manual/en/language.namespaces.php">PHP
      namespaces</link> everywhere: core, core extensions, third party
      extensions and everything in between.</para>

      <bridgehead>The core</bridgehead>

      <para>The work on namespacing core Joomla API classes had started since
      Joomla 3.3. If you have not updated your code the last few years you may
      have found that it no longer works on Joomla 4. Do not despair! The vast
      majority of issues comes from your using outdated, non-namespaced
      versions of core classes in your code. Replacing them with their
      namespaced versions will let most Joomla 3–only extensions to run well
      enough in Joomla 4 for a migration to be practical.</para>

      <para>I have collected the old, non-namespaced core classes and the new,
      namespaced names of them along with the Joomla version the namespaced
      versions appeared and the Joomla version the non-namespaced versions are
      or will be removed in <link
      xlink:href="https://github.com/nikosdion/joomlatypehints/blob/main/JoomlaObsoleteClasses.md">my
      Joomla Type Hints</link> repository. The repository also includes <link
      xlink:href="https://getrector.org">Rector</link> configurations which
      allow you to do most of the heavy lifting using an automated tool. For
      everything else you need some good old search and replace across your
      source trees.</para>

      <bridgehead>The extensions</bridgehead>

      <para>The story of Joomla 4 began on the last day of May 2015 in Prague,
      Czech Republic at a round table discussion about the future of Joomla. A
      dozen or so leadership members, core contributors and third party
      developers sat down to figure out why Joomla “sucks” and how to improve
      it.</para>

      <para>Beyond the user-facing issues, we found out that the core MVC and
      architecture were extremely dated. The core MVC started being developed
      in 2005 and made its first appearance in 2007, with Joomla 1.5. It had
      not changed much, despite some moderate improvements in Joomla 1.6 which
      was released in 2010 (e.g. XML Forms) and a few disparate things added
      here and there (e.g. Tags in 3.2, Layouts in 3.4 and so on). You could
      not reference frontend code from the backend or vice-versa. For third
      party extensions this was an annoyance which led to duplicated code and
      bugs. For using core code, like creating articles <emphasis>the right
      way</emphasis> using <code>com_content</code>'s Article model, it was
      nearly impossible: if you tried doing that on a page which had already
      loaded the front-end ContentModelArticle class you could no longer load
      the same–named but entirely differently operating backend class.</para>

      <para>The way to solve that would be to <emphasis>namespace</emphasis>
      the extensions' code. A com_example extension could have the namespace
      prefix \MyCompany\Example\Administrator for its backend classes and
      \MyCompany\Example\Site for its frontend classes. This way you could
      have something like:</para>

      <programlisting>namespace \MyCompany\Example\Site\Model;

class Item extends \MyCompany\Example\Administrator\Model\Item
{
   // ...
}</programlisting>

      <para>By being able to extend classes across application sides you would
      finally be able to get rid of duplicate code and obliterate bugs coming
      from that bad practice. </para>

      <para>By following the <link
      xlink:href="https://www.php-fig.org/psr/psr-4/">PSR-4</link> standard we
      could also have a very efficient autoloader which allows us to load any
      extension's classes from anywhere, without having to know where on the
      filesystem the class file lives and without having to use the ugly
      static methods of the core MVC classes (which, by the way, would NOT
      work predictably across extensions because of their dependence on the
      <code>JPATH_COMPONENT_ADMINISTRATOR</code> and
      <code>JPATH_COMPONENT</code> constants which cannot, of course, be
      redefined).</para>

      <para>Each extension's namespace is declared in the XML manifest of the
      extension using a new XML element under the
      <code>&lt;extension&gt;</code> root element:</para>

      <programlisting>&lt;namespace path="src"&gt;My\Namespace\Prefix&lt;/namespace&gt;</programlisting>

      <para>The <code>path</code> attribute tells Joomla which subdirectory of
      your extension holds the PSR-4 of your extension's PHP files. It is best
      practice to name it <filename>src</filename> but <emphasis>you don't
      have to</emphasis>. In the rest of this section I assume you are using
      <filename>src</filename>.</para>

      <para>The text inside the XML element, <code>My\Namespace\Prefix</code>
      in our example, is the namespace prefix you will be using.</para>

      <para>Here is how namespace prefixes work across different types of
      extensions:</para>

      <itemizedlist>
        <listitem>
          <para><emphasis role="bold">Component, frontend</emphasis>. Each
          component can register its own namespace prefix without any
          restrictions. It is <emphasis>recommended</emphasis> to use the
          convention <code>\Company\Something</code> where
          <code>Company</code> is your company name (or a shortened version
          thereof) and <code>Something</code> corresponds to the
          <code>com_something</code> extension name of your component. For
          example, the component <code>com_example</code> by Acme, Inc could
          have a namespace prefix of <code>\Acme\Example</code> set up in its
          XML manifest. In this case its frontend classes MUST be under the
          namespace <code>\Acme\Example\Site</code>. The folder
          <filename>components/com_example/src</filename> is the root of the
          <code>\Acme\Example\Site</code> namespace.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Component, backend</emphasis>. Let's say
          we have the component <code>com_example</code> by Acme, Inc which
          has a namespace prefix of <code>\Acme\Example</code>. In this case
          its backend classes MUST be under the namespace
          <code>\Acme\Example\Administrator</code>. The folder
          <filename>administrator/components/com_example/src</filename> is the
          root of the <code>\Acme\Example\Administrator</code>
          namespace.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Component, API application</emphasis>.
          The API application is the third Joomla application (the other two
          being Site the frontend, and Administrator the backend). We'll talk
          about it <link linkend="com-api">later in this book</link>. Let's
          say we have the component <code>com_example</code> by Acme, Inc
          which has a namespace prefix of <code>\Acme\Example</code>. In this
          case its API application classes MUST be under the namespace
          <code>\Acme\Example\Api</code>. The folder
          <filename>api/components/com_example/src</filename> is the root of
          the <code>\Acme\Example\Api</code> namespace.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Module, frontend</emphasis>. A frontend
          module mod_example MUST have its classes under the namespace
          <code>Joomla\Module\Example\Site</code>. The namespace you MUST
          declare in the XML manifest is <code>Joomla\Module\Example</code>.
          Even though you are severely restricted in the namespace prefix you
          can use, you MUST provide it in your XML manifest or your module
          won't work! The folder <filename>modules/mod_example/src</filename>
          is the root of the <code>Joomla\Module\Example\Site</code>
          namespace.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Module, backend</emphasis>. A backend
          module mod_example MUST have its classes under the namespace
          <code>Joomla\Module\Example\Administrator</code>. The namespace you
          MUST declare in the XML manifest is
          <code>Joomla\Module\Example</code>. Even though you are severely
          restricted in the namespace prefix you can use, you MUST provide it
          in your XML manifest or your module won't work! The folder
          <filename>administrator/modules/mod_example/src</filename> is the
          root of the <code>Joomla\Module\Example\Administrator</code>
          namespace.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Plugin</emphasis>. The plugin
          <code>plg_system_example</code> MUST have its classes under the
          namespace <code>Joomla\Plugin\System\Example</code>. The namespace
          you MUST declare in the XML manifest is
          <code>Joomla\Plugin\System\Example</code>. Even though you are
          severely restricted in the namespace prefix you can use, you MUST
          provide it in your XML manifest or your plugin won't work! The
          folder <filename>plugins/system/example/src</filename> is the root
          of the <code>Joomla\Plugin\System\Example</code> namespace.</para>
        </listitem>

        <listitem>
          <para><emphasis role="bold">Template</emphasis>. Well, Joomla does
          NOT register a namespace for templates. You are encouraged to use
          namespaces for any template–specific code (you certainly have some
          helpers, don't you?) BUT Joomla won't facilitate you with any
          autoloading. You will have to register your template's namespace
          directly with the <code>JLoader::registerPrefix</code> method. It is
          a good practice putting your namespaced PHP files in the
          <filename>src</filename> directory and use the namespace
          <code>\Joomla\Template\Site\Something</code> for frontend templates
          and <code>\Joomla\Template\Administrator\Something</code> for
          backend templates. Please note that there is no real guidance for
          the template names BUT we can infer what any future change adding
          namespace support to templates will most likely be based on how
          modules are namespaced and Joomla trying to have a modicum of
          consistency.</para>
        </listitem>
      </itemizedlist>
    </section>

    <section xml:id="concepts-container">
      <title>Dependency Injection Container / Service Locator</title>

      <para/>
    </section>

    <section xml:id="concepts-webassetmanager">
      <title>Web Asset Management</title>

      <para/>
    </section>
  </chapter>

  <chapter xml:id="com">
    <title>Components</title>

    <para/>

    <section xml:id="com-j3-vs-j4-mvc">
      <title>Joomla 3 MVC vs Joomla 4 MVC</title>

      <para/>
    </section>

    <section xml:id="com-lifetime">
      <title>The lifetime of a component</title>

      <para/>
    </section>

    <section xml:id="com-services">
      <title>Service provider</title>

      <para/>
    </section>

    <section xml:id="com-extension">
      <title>Extension class</title>

      <para/>
    </section>

    <section xml:id="com-dispatcher">
      <title>Dispatcher</title>

      <para/>
    </section>

    <section xml:id="com-namespaces">
      <title>Namespaces and MVC</title>

      <para/>
    </section>

    <section xml:id="com-models">
      <title>Models</title>

      <para/>
    </section>

    <section xml:id="com-views">
      <title>Views</title>

      <para/>
    </section>

    <section xml:id="com-controllers">
      <title>Controllers</title>

      <para/>
    </section>

    <section xml:id="com-html">
      <title>HTML helper service</title>

      <para/>
    </section>

    <section xml:id="com-categories">
      <title>Categories service</title>

      <para/>
    </section>

    <section xml:id="com-router">
      <title>Router</title>

      <para/>
    </section>

    <section xml:id="com-data-to-frontend">
      <title>Passing data to the frontend</title>

      <para/>
    </section>

    <section xml:id="com-lang">
      <title>Language files</title>

      <para/>
    </section>

    <section xml:id="com-mailtemplates">
      <title>Mail Templates</title>

      <para/>
    </section>

    <section xml:id="com-layouts">
      <title>Layouts</title>

      <para/>
    </section>

    <section xml:id="com-cli">
      <title>The CLI application</title>

      <para/>
    </section>

    <section xml:id="com-api">
      <title>The API application</title>

      <para/>
    </section>

    <section xml:id="com-scheduled-tasks">
      <title>Integration with Scheduled Tasks</title>

      <para/>
    </section>

    <section xml:id="com-fields">
      <title>Custom fields</title>

      <para/>
    </section>

    <section xml:id="tags">
      <title>Tags</title>

      <para/>
    </section>

    <section xml:id="com-hmvc">
      <title>HMVC (sort of)</title>

      <para/>
    </section>

    <section xml:id="com-rector">
      <title>Using Rector</title>

      <para/>
    </section>

    <section xml:id="com-migration">
      <title>Migration strategy</title>

      <para/>
    </section>
  </chapter>

  <chapter xml:id="plg">
    <title>Plugins</title>

    <para/>

    <section xml:id="plg-forms">
      <title>The many forms of a Joomla plugin</title>

      <para/>

      <section xml:id="plg-forms-legacy">
        <title>Legacy (Joomla 1.x to 3.x)</title>

        <para/>
      </section>

      <section xml:id="plg-forms-j4-classic">
        <title>Joomla 4 classic</title>

        <para/>
      </section>

      <section xml:id="plg-forms-j4-subscriberinterface">
        <title>Joomla 4 with SubscriberInterface</title>

        <para/>
      </section>
    </section>

    <section xml:id="plg-namespaces">
      <title>Namespaces</title>

      <para/>
    </section>

    <section xml:id="plg-services">
      <title>Service Locator</title>

      <para/>
    </section>

    <section xml:id="plg-extension">
      <title>Extension class (plugin)</title>

      <para/>
    </section>

    <section xml:id="plg-lang">
      <title>Language files</title>

      <para/>
    </section>

    <section xml:id="plg-dont-break-joomla">
      <title>How NOT to break Joomla with your plugin</title>

      <para/>
    </section>

    <section xml:id="plg-concrete-events">
      <title>Generic versus Concrete events</title>

      <para/>
    </section>

    <section xml:id="plg-view-templates">
      <title>Using view templates</title>

      <para/>
    </section>

    <section xml:id="plg-interfacing-com">
      <title>Interfacing with your component</title>

      <para/>
    </section>

    <section xml:id="plg-migration">
      <title>Migration strategy</title>

      <para/>
    </section>
  </chapter>

  <chapter xml:id="mod">
    <title>Modules</title>

    <para/>

    <section xml:id="mod-legacy-vs-j4">
      <title>Legacy vs Joomla 4 modules</title>

      <para/>

      <section xml:id="mod-legacy">
        <title>Legacy modules (Joomla 1.x to 3.x)</title>

        <para/>
      </section>

      <section xml:id="mod-j4">
        <title>Joomla 4 modules</title>

        <para/>
      </section>
    </section>

    <section xml:id="mod-services">
      <title>Service Locator</title>

      <para/>
    </section>

    <section xml:id="mod-extension">
      <title>Extension class</title>

      <para/>
    </section>

    <section xml:id="mod-lang">
      <title>Language files</title>

      <para/>
    </section>

    <section xml:id="mod-helper">
      <title>The Helper</title>

      <para/>
    </section>

    <section xml:id="mod-view-templates">
      <title>View templates</title>

      <para/>
    </section>

    <section xml:id="mod-interfacing-com">
      <title>Interfacing with your component</title>

      <para/>
    </section>

    <section xml:id="mod-migration">
      <title>Migration strategy</title>

      <para/>
    </section>
  </chapter>

  <chapter xml:id="tpl">
    <title>Templates</title>

    <para/>

    <section xml:id="tpl-j4-changes">
      <title>Major changes in Joomla 4</title>

      <para/>
    </section>

    <section xml:id="tpl-subtemplates">
      <title>Sub-templates</title>

      <para/>
    </section>

    <section xml:id="tpl-custom-cassiopeia">
      <title>Using Cassiopeia to create a custom template</title>

      <para/>
    </section>

    <section xml:id="tpl-custom-from-scratch">
      <title>Custom template from scratch</title>

      <para/>
    </section>

    <section xml:id="tpl-fields">
      <title>Custom fields in your templates</title>

      <para/>
    </section>

    <section xml:id="tpl-category-content-templates">
      <title>Per-category view templates in com_content</title>

      <para/>
    </section>

    <section xml:id="tpl-migration">
      <title>Migration strategy</title>

      <para/>
    </section>
  </chapter>

  <appendix>
    <title>GNU Free Documentation License</title>

    <simpara>Version 1.3, 3 November 2008</simpara>

    <simpara>Copyright © 2000, 2001, 2002, 2007, 2008 <link
    xlink:href="https://www.fsf.org/">Free Software Foundation,
    Inc.</link></simpara>

    <simpara>Everyone is permitted to copy and distribute verbatim copies of
    this license document, but changing it is not allowed.</simpara>

    <bridgehead renderas="sect2" xml:id="section0">0. PREAMBLE</bridgehead>

    <simpara>The purpose of this License is to make a manual, textbook, or
    other functional and useful document “free” in the sense of freedom: to
    assure everyone the effective freedom to copy and redistribute it, with or
    without modifying it, either commercially or noncommercially. Secondarily,
    this License preserves for the author and publisher a way to get credit
    for their work, while not being considered responsible for modifications
    made by others.</simpara>

    <simpara>This License is a kind of “copyleft”, which means that derivative
    works of the document must themselves be free in the same sense. It
    complements the GNU General Public License, which is a copyleft license
    designed for free software.</simpara>

    <simpara>We have designed this License in order to use it for manuals for
    free software, because free software needs free documentation: a free
    program should come with manuals providing the same freedoms that the
    software does. But this License is not limited to software manuals; it can
    be used for any textual work, regardless of subject matter or whether it
    is published as a printed book. We recommend this License principally for
    works whose purpose is instruction or reference.</simpara>

    <bridgehead renderas="sect2" xml:id="section1">1. APPLICABILITY AND
    DEFINITIONS</bridgehead>

    <simpara>This License applies to any manual or other work, in any medium,
    that contains a notice placed by the copyright holder saying it can be
    distributed under the terms of this License. Such a notice grants a
    world-wide, royalty-free license, unlimited in duration, to use that work
    under the conditions stated herein. The “Document”, below, refers to any
    such manual or work. Any member of the public is a licensee, and is
    addressed as “you”. You accept the license if you copy, modify or
    distribute the work in a way requiring permission under copyright
    law.</simpara>

    <simpara>A “Modified Version” of the Document means any work containing
    the Document or a portion of it, either copied verbatim, or with
    modifications and/or translated into another language.</simpara>

    <simpara>A “Secondary Section” is a named appendix or a front-matter
    section of the Document that deals exclusively with the relationship of
    the publishers or authors of the Document to the Document's overall
    subject (or to related matters) and contains nothing that could fall
    directly within that overall subject. (Thus, if the Document is in part a
    textbook of mathematics, a Secondary Section may not explain any
    mathematics.) The relationship could be a matter of historical connection
    with the subject or with related matters, or of legal, commercial,
    philosophical, ethical or political position regarding them.</simpara>

    <simpara>The “Invariant Sections” are certain Secondary Sections whose
    titles are designated, as being those of Invariant Sections, in the notice
    that says that the Document is released under this License. If a section
    does not fit the above definition of Secondary then it is not allowed to
    be designated as Invariant. The Document may contain zero Invariant
    Sections. If the Document does not identify any Invariant Sections then
    there are none.</simpara>

    <simpara>The “Cover Texts” are certain short passages of text that are
    listed, as Front-Cover Texts or Back-Cover Texts, in the notice that says
    that the Document is released under this License. A Front-Cover Text may
    be at most 5 words, and a Back-Cover Text may be at most 25
    words.</simpara>

    <simpara>A “Transparent” copy of the Document means a machine-readable
    copy, represented in a format whose specification is available to the
    general public, that is suitable for revising the document
    straightforwardly with generic text editors or (for images composed of
    pixels) generic paint programs or (for drawings) some widely available
    drawing editor, and that is suitable for input to text formatters or for
    automatic translation to a variety of formats suitable for input to text
    formatters. A copy made in an otherwise Transparent file format whose
    markup, or absence of markup, has been arranged to thwart or discourage
    subsequent modification by readers is not Transparent. An image format is
    not Transparent if used for any substantial amount of text. A copy that is
    not “Transparent” is called “Opaque”.</simpara>

    <simpara>Examples of suitable formats for Transparent copies include plain
    ASCII without markup, Texinfo input format, LaTeX input format, SGML or
    XML using a publicly available DTD, and standard-conforming simple HTML,
    PostScript or PDF designed for human modification. Examples of transparent
    image formats include PNG, XCF and JPG. Opaque formats include proprietary
    formats that can be read and edited only by proprietary word processors,
    SGML or XML for which the DTD and/or processing tools are not generally
    available, and the machine-generated HTML, PostScript or PDF produced by
    some word processors for output purposes only.</simpara>

    <simpara>The “Title Page” means, for a printed book, the title page
    itself, plus such following pages as are needed to hold, legibly, the
    material this License requires to appear in the title page. For works in
    formats which do not have any title page as such, “Title Page” means the
    text near the most prominent appearance of the work's title, preceding the
    beginning of the body of the text.</simpara>

    <simpara>The “publisher” means any person or entity that distributes
    copies of the Document to the public.</simpara>

    <simpara>A section “Entitled XYZ” means a named subunit of the Document
    whose title either is precisely XYZ or contains XYZ in parentheses
    following text that translates XYZ in another language. (Here XYZ stands
    for a specific section name mentioned below, such as “Acknowledgements”,
    “Dedications”, “Endorsements”, or “History”.) To “Preserve the Title” of
    such a section when you modify the Document means that it remains a
    section “Entitled XYZ” according to this definition.</simpara>

    <simpara>The Document may include Warranty Disclaimers next to the notice
    which states that this License applies to the Document. These Warranty
    Disclaimers are considered to be included by reference in this License,
    but only as regards disclaiming warranties: any other implication that
    these Warranty Disclaimers may have is void and has no effect on the
    meaning of this License.</simpara>

    <bridgehead renderas="sect2" xml:id="section2">2. VERBATIM
    COPYING</bridgehead>

    <simpara>You may copy and distribute the Document in any medium, either
    commercially or noncommercially, provided that this License, the copyright
    notices, and the license notice saying this License applies to the
    Document are reproduced in all copies, and that you add no other
    conditions whatsoever to those of this License. You may not use technical
    measures to obstruct or control the reading or further copying of the
    copies you make or distribute. However, you may accept compensation in
    exchange for copies. If you distribute a large enough number of copies you
    must also follow the conditions in section 3.</simpara>

    <simpara>You may also lend copies, under the same conditions stated above,
    and you may publicly display copies.</simpara>

    <bridgehead renderas="sect2" xml:id="section3">3. COPYING IN
    QUANTITY</bridgehead>

    <simpara>If you publish printed copies (or copies in media that commonly
    have printed covers) of the Document, numbering more than 100, and the
    Document's license notice requires Cover Texts, you must enclose the
    copies in covers that carry, clearly and legibly, all these Cover Texts:
    Front-Cover Texts on the front cover, and Back-Cover Texts on the back
    cover. Both covers must also clearly and legibly identify you as the
    publisher of these copies. The front cover must present the full title
    with all words of the title equally prominent and visible. You may add
    other material on the covers in addition. Copying with changes limited to
    the covers, as long as they preserve the title of the Document and satisfy
    these conditions, can be treated as verbatim copying in other
    respects.</simpara>

    <simpara>If the required texts for either cover are too voluminous to fit
    legibly, you should put the first ones listed (as many as fit reasonably)
    on the actual cover, and continue the rest onto adjacent pages.</simpara>

    <simpara>If you publish or distribute Opaque copies of the Document
    numbering more than 100, you must either include a machine-readable
    Transparent copy along with each Opaque copy, or state in or with each
    Opaque copy a computer-network location from which the general
    network-using public has access to download using public-standard network
    protocols a complete Transparent copy of the Document, free of added
    material. If you use the latter option, you must take reasonably prudent
    steps, when you begin distribution of Opaque copies in quantity, to ensure
    that this Transparent copy will remain thus accessible at the stated
    location until at least one year after the last time you distribute an
    Opaque copy (directly or through your agents or retailers) of that edition
    to the public.</simpara>

    <simpara>It is requested, but not required, that you contact the authors
    of the Document well before redistributing any large number of copies, to
    give them a chance to provide you with an updated version of the
    Document.</simpara>

    <bridgehead renderas="sect2" xml:id="section4">4.
    MODIFICATIONS</bridgehead>

    <simpara>You may copy and distribute a Modified Version of the Document
    under the conditions of sections 2 and 3 above, provided that you release
    the Modified Version under precisely this License, with the Modified
    Version filling the role of the Document, thus licensing distribution and
    modification of the Modified Version to whoever possesses a copy of it. In
    addition, you must do these things in the Modified Version:</simpara>

    <orderedlist numeration="upperalpha">
      <listitem>
        <simpara>Use in the Title Page (and on the covers, if any) a title
        distinct from that of the Document, and from those of previous
        versions (which should, if there were any, be listed in the History
        section of the Document). You may use the same title as a previous
        version if the original publisher of that version gives
        permission.</simpara>
      </listitem>

      <listitem>
        <simpara>List on the Title Page, as authors, one or more persons or
        entities responsible for authorship of the modifications in the
        Modified Version, together with at least five of the principal authors
        of the Document (all of its principal authors, if it has fewer than
        five), unless they release you from this requirement.</simpara>
      </listitem>

      <listitem>
        <simpara>State on the Title page the name of the publisher of the
        Modified Version, as the publisher.</simpara>
      </listitem>

      <listitem>
        <simpara>Preserve all the copyright notices of the Document.</simpara>
      </listitem>

      <listitem>
        <simpara>Add an appropriate copyright notice for your modifications
        adjacent to the other copyright notices.</simpara>
      </listitem>

      <listitem>
        <simpara>Include, immediately after the copyright notices, a license
        notice giving the public permission to use the Modified Version under
        the terms of this License, in the form shown in the Addendum
        below.</simpara>
      </listitem>

      <listitem>
        <simpara>Preserve in that license notice the full lists of Invariant
        Sections and required Cover Texts given in the Document's license
        notice.</simpara>
      </listitem>

      <listitem>
        <simpara>Include an unaltered copy of this License.</simpara>
      </listitem>

      <listitem>
        <simpara>Preserve the section Entitled “History”, Preserve its Title,
        and add to it an item stating at least the title, year, new authors,
        and publisher of the Modified Version as given on the Title Page. If
        there is no section Entitled “History” in the Document, create one
        stating the title, year, authors, and publisher of the Document as
        given on its Title Page, then add an item describing the Modified
        Version as stated in the previous sentence.</simpara>
      </listitem>

      <listitem>
        <simpara>Preserve the network location, if any, given in the Document
        for public access to a Transparent copy of the Document, and likewise
        the network locations given in the Document for previous versions it
        was based on. These may be placed in the “History” section. You may
        omit a network location for a work that was published at least four
        years before the Document itself, or if the original publisher of the
        version it refers to gives permission.</simpara>
      </listitem>

      <listitem>
        <simpara>For any section Entitled “Acknowledgements” or “Dedications”,
        Preserve the Title of the section, and preserve in the section all the
        substance and tone of each of the contributor acknowledgements and/or
        dedications given therein.</simpara>
      </listitem>

      <listitem>
        <simpara>Preserve all the Invariant Sections of the Document,
        unaltered in their text and in their titles. Section numbers or the
        equivalent are not considered part of the section titles.</simpara>
      </listitem>

      <listitem>
        <simpara>Delete any section Entitled “Endorsements”. Such a section
        may not be included in the Modified Version.</simpara>
      </listitem>

      <listitem>
        <simpara>Do not retitle any existing section to be Entitled
        “Endorsements” or to conflict in title with any Invariant
        Section.</simpara>
      </listitem>

      <listitem>
        <simpara>Preserve any Warranty Disclaimers.</simpara>
      </listitem>
    </orderedlist>

    <simpara>If the Modified Version includes new front-matter sections or
    appendices that qualify as Secondary Sections and contain no material
    copied from the Document, you may at your option designate some or all of
    these sections as invariant. To do this, add their titles to the list of
    Invariant Sections in the Modified Version's license notice. These titles
    must be distinct from any other section titles.</simpara>

    <simpara>You may add a section Entitled “Endorsements”, provided it
    contains nothing but endorsements of your Modified Version by various
    parties — for example, statements of peer review or that the text has been
    approved by an organization as the authoritative definition of a
    standard.</simpara>

    <simpara>You may add a passage of up to five words as a Front-Cover Text,
    and a passage of up to 25 words as a Back-Cover Text, to the end of the
    list of Cover Texts in the Modified Version. Only one passage of
    Front-Cover Text and one of Back-Cover Text may be added by (or through
    arrangements made by) any one entity. If the Document already includes a
    cover text for the same cover, previously added by you or by arrangement
    made by the same entity you are acting on behalf of, you may not add
    another; but you may replace the old one, on explicit permission from the
    previous publisher that added the old one.</simpara>

    <simpara>The author(s) and publisher(s) of the Document do not by this
    License give permission to use their names for publicity for or to assert
    or imply endorsement of any Modified Version.</simpara>

    <bridgehead renderas="sect2" xml:id="section5">5. COMBINING
    DOCUMENTS</bridgehead>

    <simpara>You may combine the Document with other documents released under
    this License, under the terms defined in section 4 above for modified
    versions, provided that you include in the combination all of the
    Invariant Sections of all of the original documents, unmodified, and list
    them all as Invariant Sections of your combined work in its license
    notice, and that you preserve all their Warranty Disclaimers.</simpara>

    <simpara>The combined work need only contain one copy of this License, and
    multiple identical Invariant Sections may be replaced with a single copy.
    If there are multiple Invariant Sections with the same name but different
    contents, make the title of each such section unique by adding at the end
    of it, in parentheses, the name of the original author or publisher of
    that section if known, or else a unique number. Make the same adjustment
    to the section titles in the list of Invariant Sections in the license
    notice of the combined work.</simpara>

    <simpara>In the combination, you must combine any sections Entitled
    “History” in the various original documents, forming one section Entitled
    “History”; likewise combine any sections Entitled “Acknowledgements”, and
    any sections Entitled “Dedications”. You must delete all sections Entitled
    “Endorsements”.</simpara>

    <bridgehead renderas="sect2" xml:id="section6">6. COLLECTIONS OF
    DOCUMENTS</bridgehead>

    <simpara>You may make a collection consisting of the Document and other
    documents released under this License, and replace the individual copies
    of this License in the various documents with a single copy that is
    included in the collection, provided that you follow the rules of this
    License for verbatim copying of each of the documents in all other
    respects.</simpara>

    <simpara>You may extract a single document from such a collection, and
    distribute it individually under this License, provided you insert a copy
    of this License into the extracted document, and follow this License in
    all other respects regarding verbatim copying of that document.</simpara>

    <bridgehead renderas="sect2" xml:id="section7">7. AGGREGATION WITH
    INDEPENDENT WORKS</bridgehead>

    <simpara>A compilation of the Document or its derivatives with other
    separate and independent documents or works, in or on a volume of a
    storage or distribution medium, is called an “aggregate” if the copyright
    resulting from the compilation is not used to limit the legal rights of
    the compilation's users beyond what the individual works permit. When the
    Document is included in an aggregate, this License does not apply to the
    other works in the aggregate which are not themselves derivative works of
    the Document.</simpara>

    <simpara>If the Cover Text requirement of section 3 is applicable to these
    copies of the Document, then if the Document is less than one half of the
    entire aggregate, the Document's Cover Texts may be placed on covers that
    bracket the Document within the aggregate, or the electronic equivalent of
    covers if the Document is in electronic form. Otherwise they must appear
    on printed covers that bracket the whole aggregate.</simpara>

    <bridgehead renderas="sect2" xml:id="section8">8. TRANSLATION</bridgehead>

    <simpara>Translation is considered a kind of modification, so you may
    distribute translations of the Document under the terms of section 4.
    Replacing Invariant Sections with translations requires special permission
    from their copyright holders, but you may include translations of some or
    all Invariant Sections in addition to the original versions of these
    Invariant Sections. You may include a translation of this License, and all
    the license notices in the Document, and any Warranty Disclaimers,
    provided that you also include the original English version of this
    License and the original versions of those notices and disclaimers. In
    case of a disagreement between the translation and the original version of
    this License or a notice or disclaimer, the original version will
    prevail.</simpara>

    <simpara>If a section in the Document is Entitled “Acknowledgements”,
    “Dedications”, or “History”, the requirement (section 4) to Preserve its
    Title (section 1) will typically require changing the actual
    title.</simpara>

    <bridgehead renderas="sect2" xml:id="section9">9. TERMINATION</bridgehead>

    <simpara>You may not copy, modify, sublicense, or distribute the Document
    except as expressly provided under this License. Any attempt otherwise to
    copy, modify, sublicense, or distribute it is void, and will automatically
    terminate your rights under this License.</simpara>

    <simpara>However, if you cease all violation of this License, then your
    license from a particular copyright holder is reinstated (a)
    provisionally, unless and until the copyright holder explicitly and
    finally terminates your license, and (b) permanently, if the copyright
    holder fails to notify you of the violation by some reasonable means prior
    to 60 days after the cessation.</simpara>

    <simpara>Moreover, your license from a particular copyright holder is
    reinstated permanently if the copyright holder notifies you of the
    violation by some reasonable means, this is the first time you have
    received notice of violation of this License (for any work) from that
    copyright holder, and you cure the violation prior to 30 days after your
    receipt of the notice.</simpara>

    <simpara>Termination of your rights under this section does not terminate
    the licenses of parties who have received copies or rights from you under
    this License. If your rights have been terminated and not permanently
    reinstated, receipt of a copy of some or all of the same material does not
    give you any rights to use it.</simpara>

    <bridgehead renderas="sect2" xml:id="section10">10. FUTURE REVISIONS OF
    THIS LICENSE</bridgehead>

    <simpara>The Free Software Foundation may publish new, revised versions of
    the GNU Free Documentation License from time to time. Such new versions
    will be similar in spirit to the present version, but may differ in detail
    to address new problems or concerns. See <link
    xlink:href="https://www.gnu.org/licenses/">https://www.gnu.org/licenses/</link>.</simpara>

    <simpara>Each version of the License is given a distinguishing version
    number. If the Document specifies that a particular numbered version of
    this License “or any later version” applies to it, you have the option of
    following the terms and conditions either of that specified version or of
    any later version that has been published (not as a draft) by the Free
    Software Foundation. If the Document does not specify a version number of
    this License, you may choose any version ever published (not as a draft)
    by the Free Software Foundation. If the Document specifies that a proxy
    can decide which future versions of this License can be used, that proxy's
    public statement of acceptance of a version permanently authorizes you to
    choose that version for the Document.</simpara>

    <bridgehead renderas="sect2" xml:id="section11">11.
    RELICENSING</bridgehead>

    <simpara>“Massive Multiauthor Collaboration Site” (or “MMC Site”) means
    any World Wide Web server that publishes copyrightable works and also
    provides prominent facilities for anybody to edit those works. A public
    wiki that anybody can edit is an example of such a server. A “Massive
    Multiauthor Collaboration” (or “MMC”) contained in the site means any set
    of copyrightable works thus published on the MMC site.</simpara>

    <simpara>“CC-BY-SA” means the Creative Commons Attribution-Share Alike 3.0
    license published by Creative Commons Corporation, a not-for-profit
    corporation with a principal place of business in San Francisco,
    California, as well as future copyleft versions of that license published
    by that same organization.</simpara>

    <simpara>“Incorporate” means to publish or republish a Document, in whole
    or in part, as part of another Document.</simpara>

    <simpara>An MMC is “eligible for relicensing” if it is licensed under this
    License, and if all works that were first published under this License
    somewhere other than this MMC, and subsequently incorporated in whole or
    in part into the MMC, (1) had no cover texts or invariant sections, and
    (2) were thus incorporated prior to November 1, 2008.</simpara>

    <simpara>The operator of an MMC Site may republish an MMC contained in the
    site under CC-BY-SA on the same site at any time before August 1, 2009,
    provided the MMC is eligible for relicensing.</simpara>

    <bridgehead renderas="sect2" xml:id="addendum">ADDENDUM: How to use this
    License for your documents</bridgehead>

    <simpara>To use this License in a document you have written, include a
    copy of the License in the document and put the following copyright and
    license notices just after the title page:</simpara>

    <screen>Copyright © YEAR YOUR NAME

Permission is granted to copy, distribute and/or modify this document under the
terms of the GNU Free Documentation License, Version 1.3 or any later version
published by the Free Software Foundation; with no Invariant Sections, no
Front-Cover Texts, and no Back-Cover Texts. A copy of the license is included in
the section entitled “GNU Free Documentation License”.</screen>

    <simpara>If you have Invariant Sections, Front-Cover Texts and Back-Cover
    Texts, replace the “with… Texts.” line with this:</simpara>

    <screen>with the Invariant Sections being LIST THEIR TITLES, with the Front-Cover Texts
being LIST, and with the Back-Cover Texts being LIST.</screen>

    <simpara>If you have Invariant Sections without Cover Texts, or some other
    combination of the three, merge those two alternatives to suit the
    situation.</simpara>

    <simpara>If your document contains nontrivial examples of program code, we
    recommend releasing these examples in parallel under your choice of free
    software license, such as the GNU General Public License, to permit their
    use in free software.</simpara>
  </appendix>
</book>
